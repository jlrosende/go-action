name: 4 - SISU CD Deploy - Java

on:
  workflow_call:
    inputs:
      from:
        description: "Origin of code to publish artifacts"
        required: true
        type: string
      environment:
        description: "Environment"
        required: true
        type: string
      extra_args:
        description: "extra args to select the fucntions to deploy"
        type: string
        required: false
        default: ""
      run_db:
        description: Enabled the action to deploy database configuration
        type: boolean
        required: false
        default: true
    secrets:
      SISU:
        required: true
      DIST_PLAT_DEPLOYER_USERNAME:
        required: true
      DIST_PLAT_DEPLOYER_TOKEN:
        required: true
      DT_ENDPOINT:
        required: true
      DT_SECRET:
        required: true
      GH_TOKEN_READER:
        required: true

  workflow_dispatch:
    inputs:
      from:
        description: "Origin of code to publish artifacts"
        required: true
        type: string
      environment:
        description: "Environment"
        required: true
        type: string
      extra_args:
        description: "extra args to select the fucntions to deploy"
        type: string
        required: false
        default: ""
      run_db:
        description: Enabled the action to deploy database configuration
        type: boolean
        required: false
        default: true

env:
  WORKFLOW_VERSION: << .Version >>
  UPDATE_WORKFLOW: true

jobs:
  parse:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.parse.outputs.version }}
      type: ${{ steps.parse.outputs.type }}

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.from }}

      - name: Filter by type (release or snapshot)
        id: parse
        env:
          version: ${{ inputs.from }}
        run: |
          if [ $(git tag -l "$version") ]; then
            echo "version=$version" >> $GITHUB_OUTPUT
            echo "type=release" >> $GITHUB_OUTPUT
            type="release"
          else
            echo "version=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
            echo "type=snapshot" >> $GITHUB_OUTPUT
            type="snapshot"
          fi

  artifact:
    needs:
      - parse
    runs-on: ubuntu-latest
    outputs:
      build: ${{ steps.find.outputs.build }}
      function_matrix: ${{ steps.matrix.outputs.function_matrix }}

    steps:
      - name: Init Jfrog Cli
        uses: jfrog/setup-jfrog-cli@v3

      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}

      - name: Checkout SISU Actions
        uses: actions/checkout@v3
        with:
          repository: inditex/lib-sisucommonsgh
          ref: v2.0.0-java-alpha.10
          path: ./.github/actions/
          token: ${{ secrets.GH_TOKEN_READER }}

      # TODO AÃ±adir action que genere el matrix
      - name: Create Deployment Matrix
        id: matrix
        uses: ./.github/actions/sisu
        with:
          args: matrix -e ${{ inputs.environment }} -f ${{ inputs.from }} ${{ inputs.extra_args }}

      - name: Find artifacts
        id: find
        env:
          JF_URL: ${{ env.JF_URL }}
          JF_USER: ${{ secrets.DIST_PLAT_DEPLOYER_USERNAME }}
          JF_PASSWORD: ${{ secrets.DIST_PLAT_DEPLOYER_TOKEN }}
          type: ${{ needs.parse.outputs.type }}
          version: ${{ needs.parse.outputs.version }}
        run: |
          functions=$(echo ${{ toJSON(steps.matrix.outputs.function_matrix) }} | jq -r ".[] | .name")
          for name in $functions; do
            if [[ $type = "release" ]]; then
              exist=$(jf rt s function-release-local/sisu/$name/$version --url $JF_URL --user=$JF_USER --password="$JF_PASSWORD" --count)
            else
              exist=$(jf rt s function-snapshot-local/sisu/$name/$version --url $JF_URL --user=$JF_USER --password="$JF_PASSWORD" --count)
            fi

            if [[ $exist -eq 0 ]]; then
              break
            fi
          done

          if [[ $exist -eq 0 ]]; then
            echo "build=true" >> $GITHUB_OUTPUT
            build=true
          else
            echo "build=false" >> $GITHUB_OUTPUT
            build=false
          fi

          echo "Exist: $exist Build: $build"

          if [[ $build = "true" ]] && [[ $type = "release" ]]; then
            echo "::error title=RELEASE ARTIFACT::\"You are only allowed to build and deploy snapshots, you are trying to deploy a release ($version) that has no artifact.\""
            exit 1
          fi

  build:
    if: ${{ needs.artifact.outputs.build == 'true' }}
    needs:
      - artifact
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.artifact.outputs.function_matrix) }}
    uses: inditex/lib-sisucommonsgh/.github/workflows/build-java.yml@v2.0.0-java-alpha.10
    with:
      from: ${{ inputs.from }}
      environment: ${{ inputs.environment }}
      cloud: ${{ matrix.cloud }}
      AZURE_FUNCTIONAPP_RESOURCEGROUP: ${{ matrix.resource_group }}
      AZURE_FUNCTIONAPP_NAME: ${{ matrix.name }}
      PACKAGE_PATH: ${{ matrix.package_path }}
      functions: ${{ toJSON(matrix.functions) }}
      java_version: ${{ matrix.runtime }}
      cloud: ${{ matrix.cloud }}
    secrets:
      SISU: ${{ secrets.SISU }}
      DIST_PLAT_DEPLOYER_USERNAME: ${{ secrets.DIST_PLAT_DEPLOYER_USERNAME }}
      DIST_PLAT_DEPLOYER_TOKEN: ${{ secrets.DIST_PLAT_DEPLOYER_TOKEN }}
      DT_ENDPOINT: ${{ secrets.DT_ENDPOINT }}
      DT_SECRET: ${{ secrets.DT_SECRET }}
      GH_TOKEN_READER: ${{ secrets.GH_TOKEN_READER }}

  liquibase:
    if: always() && needs.artifact.result == 'success' && contains(fromJSON('["success", "skipped"]'), needs.build.result)
    needs:
      - artifact
      - build
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.artifact.outputs.function_matrix) }}
    uses: inditex/lib-sisucommonsgh/.github/workflows/liquibase.yml@v2.0.0-java-alpha.10
    with:
      enabled: ${{ contains(toJSON(matrix), '"db":') && inputs.run_db }}
      from: ${{ needs.artifact.outputs.version || needs.build.outputs.version }}
      environment: ${{ inputs.environment }}
      vault_resourcegroup: ${{ matrix.vault.resource_group }}
      vault_name: ${{ matrix.vault.name }}
      db_resourcegroup: ${{ matrix.db.resource_group }}
      db_name: ${{ matrix.db.name }}
      db_type: ${{ matrix.db.type }}
    secrets:
      SISU: ${{ secrets.SISU }}

  publish:
    if: always() && needs.artifact.result == 'success' && contains(fromJSON('["success", "skipped"]'), needs.build.result)
    needs:
      - artifact
      - build
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.artifact.outputs.function_matrix) }}
    uses: inditex/lib-sisucommonsgh/.github/workflows/publish-azf.yml@v2.0.0-java-alpha.10
    with:
      from: ${{ needs.artifact.outputs.version || needs.build.outputs.version }}
      environment: ${{ inputs.environment }}
      AZURE_FUNCTIONAPP_RESOURCEGROUP: ${{ matrix.resource_group }}
      AZURE_FUNCTIONAPP_NAME: ${{ matrix.name }}
      PACKAGE_PATH: ${{ matrix.package_path }}
      settings: ${{ toJSON(matrix.environments) }}
      # Swap mode
      type: ${{ matrix.swap.mode }}
      # Front Door params
      fd_resource_group: ${{ matrix.swap.front_door.resource_group }}
      fd_name: ${{ matrix.swap.front_door.name }}
      fd_origin_group: ${{ matrix.swap.front_door.origin_group }}
    secrets:
      SISU: ${{ secrets.SISU }}
      DIST_PLAT_DEPLOYER_USERNAME: ${{ secrets.DIST_PLAT_DEPLOYER_USERNAME }}
      DIST_PLAT_DEPLOYER_TOKEN: ${{ secrets.DIST_PLAT_DEPLOYER_TOKEN }}

  swap:
    if: always() && needs.publish.result == 'success' && !contains(fromJSON('["failure", "canceled"]'), needs.liquibase.result)
    needs:
      - artifact
      - publish
      - liquibase
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.artifact.outputs.function_matrix) }}
    uses: inditex/lib-sisucommonsgh/.github/workflows/swap-azf.yml@v2.0.0-java-alpha.10
    with:
      from: ${{ needs.artifact.outputs.version || needs.build.outputs.version }}
      environment: ${{ inputs.environment }}
      AZURE_FUNCTIONAPP_RESOURCEGROUP: ${{ matrix.resource_group }}
      AZURE_FUNCTIONAPP_NAME: ${{ matrix.name }}
      # Swap mode
      type: ${{ matrix.swap.mode }}
      # Front Door params
      fd_resource_group: ${{ matrix.swap.front_door.resource_group }}
      fd_name: ${{ matrix.swap.front_door.name }}
      fd_origin_group: ${{ matrix.swap.front_door.origin_group }}
      # App Insight Params
      ai_resource_group: ${{ matrix.swap.app_insights.resource_group }}
      ai_name: ${{ matrix.swap.app_insights.name }}
    secrets:
      SISU: ${{ secrets.SISU }}

  e2e:
    if: always() && needs.swap.result == 'success'
    needs:
      - artifact
      - swap
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.artifact.outputs.function_matrix) }}
    uses: inditex/lib-sisucommonsgh/.github/workflows/e2e-remote.yml@v2.0.0-java-alpha.10
    with:
      enabled: ${{ contains(toJSON(matrix), '"testing":') }}
      repository: ${{ matrix.testing.repository }}
      environment: ${{ inputs.environment }}
    secrets:
      token: ${{ secrets.GH_TOKEN_PUSH }}

  # rollback:
  #   if: always() && needs.e2e.result == 'failure'
  #   needs:
  #     - e2e
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include: ${{ fromJson(needs.artifact.outputs.function_matrix) }}
  #   uses: inditex/lib-sisucommonsgh/.github/workflows/swap-azf.yml@v2.0.0-java-alpha.10
  #   with:
  #     from: ${{ inputs.from }}
  #     environment: ${{ inputs.environment }}
  #     AZURE_FUNCTIONAPP_RESOURCEGROUP: ${{ matrix.resource_group }}
  #     AZURE_FUNCTIONAPP_NAME: ${{ matrix.name }}
  #   secrets:
  #     SISU: ${{ secrets.SISU }}
