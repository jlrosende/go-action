name: SISU Chatops

on:
  issue_comment:
    types:
      - created

permissions: write-all

env:
  SCM_EMAIL: srvcibot@inditex.com
  SCM_TOKEN: ${{ secrets.GH_TOKEN_PUSH }}
  SCM_USERNAME: butler-ci-bot
  SCM_COMMITTER_PGP_KEY: ${{ secrets.BUTLER_PGP_KEY }}

jobs:
  parse_cmd:
    if: ${{ !github.event.issue.pull_request }}
    name: Parse SISU comment
    runs-on: ubuntu-latest

    outputs:
      release: ${{ steps.release.outputs.release }}
      deploy: ${{ steps.deploy.outputs.deploy }}
      snapshot: ${{ steps.snapshot.outputs.snapshot }}
      args: ${{ steps.command.outputs.args }}
    steps:
      - name: Check release
        id: release
        if: ${{ startsWith(github.event.comment.body, '/sisu create release') }}
        run: |
          echo "release=true" >> $GITHUB_OUTPUT

      - name: Check deploy
        id: deploy
        if: ${{ startsWith(github.event.comment.body, '/sisu deploy') }}
        run: |
          echo "deploy=true" >> $GITHUB_OUTPUT

      - name: Check snapshot
        id: snapshot
        if: ${{ startsWith(github.event.comment.body, '/sisu create snapshot') }}
        run: |
          echo "snapshot=true" >> $GITHUB_OUTPUT

      - name: "Parse command"
        if: steps.deploy.outputs.deploy == 'true' || steps.snapshot.outputs.snapshot == 'true' || steps.release.outputs.release == 'true'
        id: command
        run: |
          args=$( echo "${{ github.event.comment.body }}" | sed 's|/sisu ||' )
          echo "args=$args" >> $GITHUB_OUTPUT

  release:
    if: ${{ needs.parse_cmd.outputs.release == 'true' }}
    name: Create release
    runs-on: ubuntu-latest
    needs: parse_cmd

    steps:
      - name: Checkout ${{ github.event.repository.default_branch }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}

      - name: Checkout SISU Actions
        uses: actions/checkout@v3
        with:
          repository: inditex/lib-sisucommonsgh
          ref: v2.0.0-java-alpha.7
          path: ./.github/actions/
          token: ${{ secrets.GH_TOKEN_READER }}

      - name: "[CMD]: SISU Create Release"
        id: cmd_release
        uses: ./.github/actions/sisu
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: ${{ needs.parse_cmd.outputs.args }}

      - name: Generate new Tag
        id: gen
        uses: ./.github/actions/github-tag-action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRY_RUN: true
          DEFAULT_BUMP: ${{ fromJSON(steps.cmd_release.outputs.args).increment }}

      - name: Checkout ${{ fromJSON(steps.cmd_release.outputs.args).from }}
        uses: actions/checkout@v3
        with:
          ref: ${{ fromJSON(steps.cmd_release.outputs.args).from }}
          fetch-depth: "0"

      - name: Config GIT
        run: |
          echo "${{ env.SCM_COMMITTER_PGP_KEY }}" | gpg --import
          git config user.name "${{ env.SCM_USERNAME }}"
          git config user.email "${{ env.SCM_EMAIL }}"
          git config commit.gpgsign true

      - name: "New PR release"
        id: pr
        env:
          new_tag: ${{ fromJSON(steps.cmd_release.outputs.args).version || steps.gen.outputs.new_tag }}
          env: ${{ fromJSON(steps.cmd_release.outputs.args).env }}
          GITHUB_TOKEN: ${{ env.SCM_TOKEN }}
        run: |
          git checkout -b release/$new_tag
          echo $new_tag >> version.info
          git add version.info
          git commit -m "Create release PR $new_tag"
          git push -u origin release/$new_tag
          echo "pr-url=$(gh pr create -l environment/$env -l release -B main -t "Create Release $new_tag" -b "Autogenerated pull request.")" >> $GITHUB_OUTPUT

      - name: Release Comment
        env:
          new_tag: ${{ fromJSON(steps.cmd_release.outputs.args).version || steps.gen.outputs.new_tag }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue comment ${{ github.event.issue.number }} -b "Release branch ${{ fromJSON(steps.cmd_release.outputs.args).version || steps.gen.outputs.new_tag }} created [Release PR](${{ steps.pr.outputs.pr-url }})"

  deploy:
    if: ${{ needs.parse_cmd.outputs.deploy == 'true' }}
    name: Run deploy
    runs-on: ubuntu-latest
    needs: parse_cmd

    steps:
      - name: Checkout ${{ github.event.repository.default_branch }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}

      - name: Checkout SISU Actions
        uses: actions/checkout@v3
        with:
          repository: inditex/lib-sisucommonsgh
          ref: v2.0.0-java-alpha.7
          path: ./.github/actions/
          token: ${{ secrets.GH_TOKEN_READER }}

      - name: "[CMD]: SISU Prepare Deploy"
        id: cmd_deploy
        uses: ./.github/actions/sisu
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: ${{ needs.parse_cmd.outputs.args }}

      - name: Run Deploy Action
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          from: ${{ fromJSON(steps.cmd_deploy.outputs.args).from }}
          env: ${{ fromJSON(steps.cmd_deploy.outputs.args).env }}
          cloud: ${{ fromJSON(steps.cmd_deploy.outputs.args).cloud }}
          name: ${{ fromJSON(steps.cmd_deploy.outputs.args).name }}
        run: |
          echo "{ \"from\": \"$from\", \"environment\": \"$env\", \"extra_args\": \"--cloud $cloud --name $name\" }" | gh workflow run sisu-cd-deploy-java.yml --json -r  ${{ github.event.repository.default_branch }}

  snapshot:
    if: ${{ needs.parse_cmd.outputs.snapshot == 'true' }}
    name: Create Snapshot
    runs-on: ubuntu-latest
    needs: parse_cmd

    steps:
      - name: Checkout ${{ github.event.repository.default_branch }}
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}

      - name: Checkout SISU Actions
        uses: actions/checkout@v3
        with:
          repository: inditex/lib-sisucommonsgh
          ref: v2.0.0-java-alpha.7
          path: ./.github/actions/
          token: ${{ secrets.GH_TOKEN_READER }}

      - name: "[CMD]: SISU Create Snapshot"
        id: cmd_release
        uses: ./.github/actions/sisu
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: ${{ needs.parse_cmd.outputs.args }}

      - name: Checkout ${{ fromJSON(steps.cmd_release.outputs.args).from }}
        uses: actions/checkout@v3
        with:
          ref: ${{ fromJSON(steps.cmd_release.outputs.args).from }}
          fetch-depth: "0"

      - name: Config GIT
        run: |
          echo "${{ env.SCM_COMMITTER_PGP_KEY }}" | gpg --import
          git config user.name "${{ env.SCM_USERNAME }}"
          git config user.email "${{ env.SCM_EMAIL }}"
          git config commit.gpgsign true

      - name: "New PR"
        id: pr
        env:
          from: ${{ fromJSON(steps.cmd_release.outputs.args).from  }}
          to: ${{ fromJSON(steps.cmd_release.outputs.args).to  }}
          env: ${{ fromJSON(steps.cmd_release.outputs.args).env }}
          GITHUB_TOKEN: ${{ env.SCM_TOKEN }}
        run: |
          echo "pr-url=$(gh pr create -l environment/$env -l snapshot -B $from -t "Created Snapshot from $from to $to" -b "Autogenerated pull request.")" >> $GITHUB_OUTPUT

      - name: Snapshot Comment
        env:
          from: ${{ fromJSON(steps.cmd_release.outputs.args).from  }}
          to: ${{ fromJSON(steps.cmd_release.outputs.args).to  }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue comment ${{ github.event.issue.number }} -b "Created Snapshot from $from to $to [Snapshot PR](${{ steps.pr.outputs.pr-url }})"
