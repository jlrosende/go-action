name: 3 - SISU CD Release - Java

on:
  pull_request:
    branches:
      - main
    types:
      - closed

  workflow_dispatch:
    inputs:
      from:
        description: "Origin of code to build release artifacts"
        type: string
        required: true
        default: main
      new_tag:
        description: "New tag"
        type: string
        required: true
      environment:
        description: "Environment (a non production environment generate functions with non production configurations)"
        type: string
        required: true
        default: pro
      force:
        description: "Forces the creation of the release even if it already exists."
        type: boolean
        required: false
        default: false
      extra_args:
        description: "extra args to select the fucntions to deploy"
        type: string
        required: false
        default: ""

  workflow_call:
    inputs:
      environment:
        description: "Non production environment"
        default: dev
        type: string
      force:
        description: "Forces the creation of the release even if it already exists."
        type: boolean
        required: false
        default: false
      extra_args:
        description: "extra args to select the fucntions to deploy"
        type: string
        required: false
        default: ""

jobs:
  # Create a new tag from previous existing tag, you can set the current tag manualy.
  create_tag_release:
    if: ${{ contains(fromJSON('["workflow_dispatch", "workflow_call"]'), github.event_name) || ( github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/') && contains(github.event.pull_request.labels.*.name, 'release') && contains(join(github.event.pull_request.labels.*.name, ','), 'environment/') ) }}
    runs-on: ubuntu-latest

    outputs:
      new_tag: ${{ steps.get_tag.outputs.new_tag }}

    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: "0"

      - name: Get tag
        id: get_tag
        env:
          TAG: ${{ inputs.new_tag || github.head_ref }}
        run: |
          if [[ "${{ startsWith(env.TAG, 'release/') }}" == "false" ]]; then
            echo "::error title=BAD TAG::ERROR: the tag \"$TAG\" is not properly formatted release/<tag>"
            exit 1
          fi
          tag=$(echo "${{ inputs.new_tag || github.head_ref }}" | sed 's|release/||' -)
          echo "new_tag=${tag}" >> $GITHUB_OUTPUT

      - name: Create Release
        continue-on-error: ${{ inputs.force || contains(github.event.pull_request.labels.*.name, 'sisu/force-rebuild')}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_TAG: ${{ steps.get_tag.outputs.new_tag }}
        run: |
          gh release create $NEW_TAG --generate-notes --target ${{ inputs.from || 'main' }}

  # Get the sisu.yml config file to create a matrix of releases
  release_matrix:
    needs:
      - create_tag_release
    runs-on: ubuntu-latest

    outputs:
      env: "${{ steps.envs.outputs.env }}"
      function_matrix: ${{ steps.matrix.outputs.function_matrix }}

    steps:
      - name: Get env PR
        if: ${{ ! contains(fromJSON('["workflow_dispatch", "workflow_call"]'), github.event_name) }}
        id: envs
        shell: python
        run: |
          import os

          labels = "${{ join(github.event.pull_request.labels.*.name, ',') }}"

          envs = list(filter(lambda label: label.startswith('environment/'), labels.split(",")))

          if len(envs) > 1:
              print(f"::error title=Environment::ERROR:Selected more than one environment label {envs}")
              exit(1)

          if len(envs) < 1:
              print(f"::error title=Environment::ERROR:You must select one environment label {envs}")
              exit(2)

          env = envs[-1].split("/")[-1]

          with open(os.environ['GITHUB_OUTPUT'], 'a') as fp:
              fp.write(f'env={env}\n')

      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}

      - name: Checkout SISU Actions
        uses: actions/checkout@v3
        with:
          repository: inditex/lib-sisucommonsgh
          ref: v2.0.0-node-alpha.9
          path: ./.github/actions/
          token: ${{ secrets.GH_TOKEN_READER }}

      # TODO AÃ±adir action que genere el matrix
      - name: Create Deployment Matrix
        id: matrix
        uses: ./.github/actions/sisu
        with:
          args: matrix -e ${{ inputs.environment || steps.envs.outputs.env }} -f ${{ needs.create_tag_release.outputs.new_tag }} ${{ inputs.extra_args }}

  # Build and upload a matrix of packages and push them to jfrog
  build:
    needs:
      - release_matrix
      - create_tag_release
    uses: inditex/lib-sisucommonsgh/.github/workflows/build-azf-node.yml@v2.0.0-node-alpha.9

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.release_matrix.outputs.function_matrix) }}

    with:
      from: ${{ needs.create_tag_release.outputs.new_tag }}
      environment: pro
      AZURE_FUNCTIONAPP_RESOURCEGROUP: ${{ matrix.resource_group }}
      AZURE_FUNCTIONAPP_NAME: ${{ matrix.name }}
      PACKAGE_PATH: ${{ matrix.package_path }}
      functions: ${{ toJSON(matrix.functions) }}
    secrets:
      SISU: ${{ secrets.SISU }}
      DIST_PLAT_DEPLOYER_USERNAME: ${{ secrets.DIST_PLAT_DEPLOYER_USERNAME }}
      DIST_PLAT_DEPLOYER_TOKEN: ${{ secrets.DIST_PLAT_DEPLOYER_TOKEN }}
      DT_ENDPOINT: ${{ secrets.DT_ENDPOINT }}
      DT_SECRET: ${{ secrets.DT_SECRET }}
      GH_TOKEN_READER: ${{ secrets.GH_TOKEN_READER }}

  # Create a new Issue to run a deployment release pipeline
  deploy_issue:
    needs:
      - release_matrix
      - create_tag_release
      - build
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.repository.default_branch }}

      - name: Create Deploy Release Issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NEW_TAG: ${{ needs.create_tag_release.outputs.new_tag }}
          ENV: ${{ needs.release_matrix.outputs.env || inputs.environment }}
        run: |
          echo "" > body.txt
          echo "# Deploy Release $NEW_TAG" >> body.txt
          echo "Create a comment in this issue. Paste the following command to deploy the release **$NEW_TAG** in **${ENV}** environment." >> body.txt
          echo "\`\`\`bash" >> body.txt
          echo "/sisu deploy -e $ENV -f $NEW_TAG" >> body.txt
          echo "\`\`\`" >> body.txt
          gh issue create -l release -t "Deploy Release $NEW_TAG" -F body.txt
